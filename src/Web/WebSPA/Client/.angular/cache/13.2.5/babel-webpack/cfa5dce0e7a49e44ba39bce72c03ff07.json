{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, catchError, of } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BasketService = /*#__PURE__*/(() => {\n  class BasketService {\n    constructor(http) {\n      this.http = http;\n      this._basket = new BehaviorSubject({});\n      this.basket$ = this._basket.asObservable();\n      this.basketsUrl = `${environment.basketsApiUrl}/baskets`;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    get basket() {\n      return this._basket.getValue();\n    }\n\n    set basket(val) {\n      this._basket.next(val);\n    }\n\n    createBasket(basket) {\n      return this.http.post(`${this.basketsUrl}`, {\n        name: basket.name,\n        description: basket.description\n      }).pipe(catchError(this.handleError('createBasket', {\n        id: 0,\n        name: \"\",\n        description: \"\",\n        basketItems: []\n      })));\n    }\n\n    getBasketItemsForBasket(id) {\n      const url = `${this.basketsUrl}/${id}/basketitems`;\n      return this.http.get(url).pipe(catchError(this.handleError('getBasketItems', [])));\n    }\n\n    getBasket(id) {\n      const url = `${this.basketsUrl}/${id}`;\n      return this.http.get(url).pipe(catchError(this.handleError(`getBasket/${id}`, {\n        id: 0,\n        name: \"\",\n        description: \"\",\n        basketItems: []\n      })));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(error);\n        return of(result);\n      };\n    }\n\n    addItem(basketItem) {\n      const url = `${this.basketsUrl}/${this.basket.id}`;\n      return this.http.post(url, {\n        itemid: basketItem.item.id,\n        quantity: basketItem.quantity\n      }).pipe(catchError(this.handleError(`addItem/${this.basket.id}`, {\n        id: 0,\n        item: {},\n        quantity: 0\n      })));\n    }\n\n    removeItem(basketItem) {\n      const url = `${this.basketsUrl}/${this.basket.id}`;\n      return this.http.delete(url, {\n        body: {\n          id: basketItem.id\n        }\n      }).pipe(catchError(this.handleError(`removeItem/${this.basket.id}`, {\n        id: 0,\n        item: {},\n        quantity: 0\n      })));\n    }\n\n    emptyBasket() {\n      this.basket.basketItems.forEach(item => this.removeItem(item));\n    }\n\n    getTotalValue() {\n      let sum = this.basket.basketItems.reduce((a, b) => {\n        var _a;\n\n        a = a + ((_a = b.item) === null || _a === void 0 ? void 0 : _a.price) * b.quantity;\n        return a;\n      }, 0);\n      return sum;\n    }\n\n    isBasketValid() {\n      if (this.basket.basketItems.find(basktitem => basktitem.quantity == null || basktitem.quantity <= 0) === undefined) return true;\n      return false;\n    }\n\n  }\n\n  BasketService.ɵfac = function BasketService_Factory(t) {\n    return new (t || BasketService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BasketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BasketService,\n    factory: BasketService.ɵfac,\n    providedIn: 'root'\n  });\n  return BasketService;\n})();","map":null,"metadata":{},"sourceType":"module"}