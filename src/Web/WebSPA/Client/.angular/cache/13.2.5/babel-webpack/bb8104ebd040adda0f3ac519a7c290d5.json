{"ast":null,"code":"export class Basket {\n  constructor() {\n    this.basketItems = [];\n  }\n\n  addItem(basketItem) {\n    let found = false;\n    this.basketItems = this.basketItems.map(bi => {\n      var _a, _b;\n\n      if (((_a = bi.item) === null || _a === void 0 ? void 0 : _a.id) == ((_b = basketItem.item) === null || _b === void 0 ? void 0 : _b.id)) {\n        bi.quantity++;\n        found = true;\n      }\n\n      return bi;\n    });\n\n    if (!found) {\n      this.basketItems.push(basketItem);\n    }\n  }\n\n  removeItem(item) {\n    const index = this.basketItems.indexOf(item, 0);\n\n    if (index > -1) {\n      this.basketItems.splice(index, 1);\n    }\n  }\n\n  emptyBasket() {\n    this.basketItems = [];\n  }\n\n  getTotalValue() {\n    let sum = this.basketItems.reduce((a, b) => {\n      var _a;\n\n      a = a + ((_a = b.item) === null || _a === void 0 ? void 0 : _a.price) * b.quantity;\n      return a;\n    }, 0);\n    return sum;\n  }\n\n  isBasketValid() {\n    if (this.basketItems.find(basktitem => basktitem.quantity == null || basktitem.quantity <= 0) === undefined) return true;\n    return false;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}