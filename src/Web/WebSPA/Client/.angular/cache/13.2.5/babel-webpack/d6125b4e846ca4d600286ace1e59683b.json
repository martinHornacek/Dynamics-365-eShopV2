{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport { Basket } from '../models/basket';\nimport * as i0 from \"@angular/core\";\nexport let StoreService = /*#__PURE__*/(() => {\n  class StoreService {\n    constructor() {\n      this._items = new BehaviorSubject([]);\n      this.items$ = this._items.asObservable();\n      this._page = new BehaviorSubject(1);\n      this.page$ = this._page.asObservable();\n      this.pageSize = 3;\n      this._pageSizeSubject = new Subject();\n      this.pageSizeChanges$ = this._pageSizeSubject.asObservable();\n      this._count = new BehaviorSubject(1);\n      this.count$ = this._count.asObservable();\n      this._filter = new BehaviorSubject({\n        name: \"\",\n        categories: []\n      });\n      this.filter$ = this._filter.asObservable();\n      this._basket = new BehaviorSubject(new Basket());\n      this.basket$ = this._basket.asObservable();\n    }\n\n    get items() {\n      return this._items.getValue();\n    }\n\n    set items(val) {\n      this._items.next(val);\n    }\n\n    get page() {\n      return this._page.getValue();\n    }\n\n    set page(val) {\n      this._page.next(val);\n    }\n\n    get count() {\n      return this._count.getValue();\n    }\n\n    set count(val) {\n      this._count.next(val);\n    }\n\n    get filter() {\n      return this._filter.getValue();\n    }\n\n    set filter(val) {\n      this._filter.next(val);\n    }\n\n    get basket() {\n      return this._basket.getValue();\n    }\n\n    set basket(val) {\n      this._basket.next(val);\n    }\n\n  }\n\n  StoreService.ɵfac = function StoreService_Factory(t) {\n    return new (t || StoreService)();\n  };\n\n  StoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StoreService,\n    factory: StoreService.ɵfac,\n    providedIn: 'root'\n  });\n  return StoreService;\n})();","map":null,"metadata":{},"sourceType":"module"}